name: CI
on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
env:
  CARGO_TERM_COLOR: always
jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.increment_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Git
        run: git fetch --prune --unshallow
      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"
      - name: Increment Version
        id: increment_version
        run: |
          latest_tag=${{ env.latest_tag }}
          version=${latest_tag#v}
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IFS='.' read -r major minor patch <<< "$version"
            new_version="v$major.$minor.$((patch + 1))"
          else
            new_version="v0.0.1"
          fi
          echo "New version: $new_version"
          echo "::set-output name=new_version::$new_version"
      - name: Build for Linux
        run: cargo build --release --target x86_64-unknown-linux-gnu
      - name: List Build Output (Linux)
        run: ls -l target/x86_64-unknown-linux-gnu/release/
      - name: Verify Build Output (Linux)
        run: |
          if [ ! -f target/x86_64-unknown-linux-gnu/release/bvm ]; then
            echo "Build output not found: target/x86_64-unknown-linux-gnu/release/bvm"
            exit 1
          fi
      - name: Package for Release (Linux)
        run: zip -r bvm_linux.zip . -i target/x86_64-unknown-linux-gnu/release/bvm
      - name: Upload Artifact (Linux)
        uses: actions/upload-artifact@v3
        with:
          name: bvm_linux
          path: bvm_linux.zip

  build-windows:
    runs-on: windows-latest
    needs: build-linux
    outputs:
      new_version: ${{ needs.build-linux.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Git
        run: git fetch --prune --unshallow
      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          $latestTag = git describe --tags (git rev-list --tags --max-count=1) 2>$null
          if ([string]::IsNullOrEmpty($latestTag)) {
            $latestTag = "v0.0.0"
          }
          echo "latest_tag=$latestTag" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Latest tag: $latestTag"
      - name: Increment Version
        id: increment_version
        run: |
          $latestTag = "${{ env.latest_tag }}"
          $version = $latestTag.TrimStart('v')
          if ($version -match '^[0-9]+\.[0-9]+\.[0-9]+$') {
            $versionParts = $version -split '\.'
            $newVersion = "v$($versionParts[0]).$($versionParts[1]).$($versionParts[2] + 1)"
          } else {
            $newVersion = "v0.0.1"
          }
          Write-Host "New version: $newVersion"
          echo "::set-output name=new_version::$newVersion"
      - name: Build for Windows
        run: cargo build --release --target x86_64-pc-windows-msvc
      - name: List Build Output (Windows)
        run: dir target\x86_64-pc-windows-msvc\release
      - name: Verify Build Output (Windows)
        run: |
          if (!(Test-Path -Path target\x86_64-pc-windows-msvc\release\bvm.exe)) {
            Write-Error "Build output not found: target\x86_64-pc-windows-msvc\release\bvm.exe"
            exit 1
          }
      - name: Download vc_redist.x64.exe
        run: Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vc_redist.x64.exe -OutFile vc_redist.x64.exe
      - name: Package for Release (Windows)
        run: |
          powershell Compress-Archive -Path target\x86_64-pc-windows-msvc\release\bvm.exe,vc_redist.x64.exe -DestinationPath bvm_windows.zip
      - name: Upload Artifact (Windows)
        uses: actions/upload-artifact@v3
        with:
          name: bvm_windows
          path: bvm_windows.zip

  build-macos:
    runs-on: macos-latest
    needs: [build-linux, build-windows]
    outputs:
      new_version: ${{ needs.build-linux.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Git
        run: git fetch --prune --unshallow
      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"
      - name: Increment Version
        id: increment_version
        run: |
          latest_tag=${{ env.latest_tag }}
          version=${latest_tag#v}
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IFS='.' read -r major minor patch <<< "$version"
            new_version="v$major.$minor.$((patch + 1))"
          else
            new_version="v0.0.1"
          fi
          echo "New version: $new_version"
          echo "::set-output name=new_version::$new_version"
      - name: Set Up Rust
        run: rustup target add x86_64-apple-darwin
      - name: Build for macOS
        run: cargo build --release --target x86_64-apple-darwin
      - name: List Build Output (macOS)
        run: ls -l target/x86_64-apple-darwin/release/
      - name: Verify Build Output (macOS)
        run: |
          if [ ! -f target/x86_64-apple-darwin/release/bvm ]; then
            echo "Build output not found: target/x86_64-apple-darwin/release/bvm"
            exit 1
          fi
      - name: Package for Release (macOS)
        run: zip -j bvm_macos.zip target/x86_64-apple-darwin/release/bvm
      - name: Upload Artifact (macOS)
        uses: actions/upload-artifact@v3
        with:
          name: bvm_macos
          path: bvm_macos.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    steps:
      - name: Download Artifacts (Linux)
        uses: actions/download-artifact@v3
        with:
          name: bvm_linux
          path: ./downloads
      - name: Download Artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: bvm_windows
          path: ./downloads
      - name: Download Artifacts (macOS)
        uses: actions/download-artifact@v3
        with:
          name: bvm_macos
          path: ./downloads
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-linux.outputs.new_version }}
          release_name: Release ${{ needs.build-linux.outputs.new_version }}
          body: |
            Release notes for ${{ needs.build-linux.outputs.new_version }}
            Added windows, mac, linux removed source code, targets folders and integrations, kept bvm the command, changed fork and recreated from ground up, updated repo, removed readme file, added vc_redist 64Bit in bvm_windows.zip file
          draft: false
          prerelease: false
      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/bvm_linux.zip
          asset_name: bvm_linux.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/bvm_windows.zip
          asset_name: bvm_windows.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/bvm_macos.zip
          asset_name: bvm_macos.zip
          asset_content_type: application/zip
